# -*- coding: utf-8 -*-
"""CAR PRICE PREDICTOR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11MStGT8Tch87okqiN13dsEGviqmeqUpm

IMPORTING DEPENDECIES
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""UPLOADING CSV FILE"""

cars_data = pd.read_csv('/content/Car_details_updated.csv')

"""GETTING INFORMATIONS ABOUT THE DATA




"""

cars_data.head()

cars_data.shape

cars_data.info()

"""DATA CLEANING AND PRE-PROCESSING

"""

cars_data.isnull().sum()

cars_data.dropna(inplace=True)

cars_data.duplicated().sum()

cars_data.drop_duplicates(inplace=True)

cars_data.duplicated().sum()

cars_data.shape

"""DATA ANALYSIS"""

cars_data.columns

cars_data.drop(['torque'],axis=1,inplace=True)

cars_data.columns

cars_data['fuel'].unique()

cars_data['seller_type'].unique()

cars_data['transmission'].unique()

cars_data['owner'].unique()

cars_data['name'].unique()

"""Extracting first name of all the recordes

"""

def get_car_brand(brand_name):
  brand_name = brand_name.split(' ')[0]
  return brand_name.strip()

cars_data['name'] = cars_data['name'].apply(get_car_brand)
cars_data['name'].unique()

cars_data['mileage'] = cars_data['mileage'].apply(get_car_brand)
cars_data['mileage'].unique()

cars_data['engine'] = cars_data['engine'].apply(get_car_brand)
cars_data['engine'].unique()

cars_data['max_power'] = cars_data['max_power'].apply(get_car_brand)
cars_data['max_power'].unique()

"""CONVERTING TEST DATA TO NUMERIC DATA"""

cars_data.replace({'fuel':{'Petrol':0,'Diesel':1,'CNG':2,'LPG':3,'Electric':4}},inplace=True)
cars_data.replace({'seller_type':{'Individual':0,'Dealer':1,'Trustmark Dealer':2}},inplace=True)
cars_data.replace({'transmission':{'Manual':0,'Automatic':1}},inplace=True)
cars_data.replace({'owner':{'First Owner':1,'Second Owner':2,'Third Owner':3,
                            'Fourth & Above Owner':4,'Test Drive Car':5}},inplace=True)
cars_data.head()

cars_data.name.replace(['Maruti', 'Skoda', 'Honda', 'Hyundai', 'Toyota', 'Ford', 'Renault',
       'Mahindra', 'Tata', 'Chevrolet', 'Datsun', 'Jeep', 'Mercedes-Benz',
       'Mitsubishi', 'Audi', 'Volkswagen', 'BMW', 'Nissan', 'Lexus',
       'Jaguar', 'Land', 'MG', 'Volvo', 'Daewoo', 'Kia', 'Fiat', 'Force',
       'Ambassador', 'Ashok', 'Isuzu', 'Opel'],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                                                21,22,23,24,25,26,27,28,29,30,31], inplace = True)

cars_data

cars_data.reset_index(drop=True,inplace=True)

cars_data

"""DATA TRAINING AND TESTING"""

X = cars_data[['name', 'year', 'km_driven', 'fuel', 'seller_type',
       'transmission', 'owner', 'mileage', 'engine', 'max_power',
       'seats', 'actual_price']]
Y = cars_data[['selling_price']]

X.head()

Y.head()

Reg = LinearRegression()

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

Reg.fit(X_train, Y_train)

predict = Reg.predict(X_test)

X_test.shape

X_train.shape

X_train.head(1)

input_data= pd.DataFrame([[2,2018,10000,1,0,0,1,13.93,2179,138.03,7.0,125000.0]], columns=['name',	'year',	'km_driven',	'fuel',	'seller_type',	'transmission',	'owner',	'mileage',	'engine',	'max_power',	'seats',	'actual_price'])

Reg.predict(input_data)

"""CHECKING ACCURACY OF THE MODEL"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

Y_pred = Reg.predict(X_test)

mae = mean_absolute_error(Y_test, Y_pred)
mse = mean_squared_error(Y_test, Y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(Y_test, Y_pred)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"RÂ² Score: {r2}")

n = len(Y_test)
k = X.shape[1]  # Number of predictors
adjusted_r2 = 1 - (1 - r2) * (n - 1) / (n - k - 1)
print("Adjusted R-squared:", adjusted_r2)
# print(k)
# print(n)

"""PLOTTING GRAPHS"""

corr_matrix = cars_data.corr()

# Plot the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

residuals = Y_test - predict
sns.residplot(x=predict, y=residuals, lowess=True, line_kws={'color': 'red'})
plt.xlabel("Predicted Values")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.show()

Y_test = np.array(Y_test).ravel()  # Convert DataFrame to NumPy and flatten
predict = np.array(predict).ravel()

plt.figure(figsize=(8,6))
sns.scatterplot(x=Y_test, y=predict, alpha=0.6)
plt.plot([min(Y_test), max(Y_test)], [min(Y_test), max(Y_test)], color='red', linestyle='dashed')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs. Predicted Car Prices")
plt.show

"""DUMPING FILE WITH PICKLE"""

import pickle as pk

pk.dump(Reg,open('Reg.pkl','wb'))

